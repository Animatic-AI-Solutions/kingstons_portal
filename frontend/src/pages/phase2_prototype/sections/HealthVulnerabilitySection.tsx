import React, { useState } from 'react';
import { ChevronRightIcon, ChevronDownIcon, PlusIcon } from '@heroicons/react/24/outline';
import { Person, SpecialRelationship, HealthItem, VulnerabilityItem } from '../types';

interface HealthVulnerabilitySectionProps {
  people: Person[];
  clientOrder: string[];
  relationships: SpecialRelationship[];
  healthItems: HealthItem[];
  vulnerabilities: VulnerabilityItem[];
  onItemClick: (item: HealthItem | VulnerabilityItem) => void;
}

const HealthVulnerabilitySection: React.FC<HealthVulnerabilitySectionProps> = ({
  people,
  clientOrder,
  relationships,
  healthItems,
  vulnerabilities,
  onItemClick
}) => {
  const [activeHealthTab, setActiveHealthTab] = useState<'health' | 'vulnerability'>('health');
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());

  // Get people sorted by client order
  const getSortedPeople = () => {
    return [...people].sort((a, b) => {
      const indexA = clientOrder.indexOf(a.id);
      const indexB = clientOrder.indexOf(b.id);
      return indexA - indexB;
    });
  };

  // Get active special relationships (sorted alphabetically)
  const getActiveRelationships = () => {
    return [...relationships]
      .filter(r => r.status === 'Active')
      .sort((a, b) => a.name.localeCompare(b.name));
  };

  // Get health counts for a person or relationship
  const getHealthCounts = (id: string, isRelationship: boolean = false) => {
    const items = healthItems.filter(h =>
      isRelationship ? h.relationshipId === id : h.personId === id
    );
    return {
      active: items.filter(h => h.status === 'Active').length,
      lapsed: items.filter(h => h.status === 'Lapsed').length
    };
  };

  // Get vulnerability counts for a person or relationship
  const getVulnerabilityCounts = (id: string, isRelationship: boolean = false) => {
    const items = vulnerabilities.filter(v =>
      isRelationship ? v.relationshipId === id : v.personId === id
    );
    return {
      active: items.filter(v => v.status === 'Active').length,
      lapsed: items.filter(v => v.status === 'Lapsed').length
    };
  };

  // Toggle card expansion
  const toggleCardExpanded = (cardId: string) => {
    setExpandedCards(prev => {
      const next = new Set(prev);
      if (next.has(cardId)) {
        next.delete(cardId);
      } else {
        next.add(cardId);
      }
      return next;
    });
  };

  const sortedPeople = getSortedPeople();
  const activeRelationships = getActiveRelationships();

  // Render a person or relationship row
  const renderEntityRow = (entity: Person | SpecialRelationship, isRelationship: boolean) => {
    const id = entity.id;
    const counts = activeHealthTab === 'health'
      ? getHealthCounts(id, isRelationship)
      : getVulnerabilityCounts(id, isRelationship);

    const unsortedItems = activeHealthTab === 'health'
      ? healthItems.filter(h => isRelationship ? h.relationshipId === id : h.personId === id)
      : vulnerabilities.filter(v => isRelationship ? v.relationshipId === id : v.personId === id);

    // Sort items: smoking status first, then vaping status, then other conditions
    // Within each category, Active items before Lapsed
    const items = activeHealthTab === 'health'
      ? unsortedItems.sort((a, b) => {
          const aIsSmoking = (a as HealthItem).type === 'Smoking Status';
          const bIsSmoking = (b as HealthItem).type === 'Smoking Status';
          const aIsVaping = (a as HealthItem).type === 'Vaping Status';
          const bIsVaping = (b as HealthItem).type === 'Vaping Status';

          // Priority order: Smoking Status > Vaping Status > Other conditions
          if (aIsSmoking && !bIsSmoking) return -1;
          if (!aIsSmoking && bIsSmoking) return 1;
          if (aIsVaping && !bIsVaping && !bIsSmoking) return -1;
          if (!aIsVaping && bIsVaping && !aIsSmoking) return 1;

          // Within same category, sort Active before Lapsed
          if (a.status === 'Active' && b.status === 'Lapsed') return -1;
          if (a.status === 'Lapsed' && b.status === 'Active') return 1;
          return 0;
        })
      : unsortedItems.sort((a, b) => {
          // For vulnerabilities, just sort Active before Lapsed
          if (a.status === 'Active' && b.status === 'Lapsed') return -1;
          if (a.status === 'Lapsed' && b.status === 'Active') return 1;
          return 0;
        });

    const cardId = `${activeHealthTab}-${isRelationship ? 'rel' : 'person'}-${id}`;
    const isExpanded = expandedCards.has(cardId);

    // Get name and relationship text
    const name = isRelationship ? (entity as SpecialRelationship).name : `${(entity as Person).title} ${(entity as Person).forename} ${(entity as Person).surname}`;
    const relationshipText = isRelationship ? (entity as SpecialRelationship).relationship : (entity as Person).relationship;

    return (
      <React.Fragment key={`${isRelationship ? 'rel' : 'person'}-${id}`}>
        <tr
          className={`hover:bg-gray-50 cursor-pointer transition-colors ${
            isRelationship ? 'bg-purple-50' : ''
          }`}
          onClick={() => toggleCardExpanded(cardId)}
        >
          <td className="px-3 py-2 whitespace-nowrap text-base font-medium text-gray-900">
            <div className="flex items-center gap-2">
              {isRelationship && (
                <span className="inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold text-white bg-purple-600 rounded">
                  SP
                </span>
              )}
              {name}
            </div>
          </td>
          <td className="px-3 py-2 whitespace-nowrap text-base text-gray-900">
            <span className={isRelationship ? 'text-purple-700 font-medium' : ''}>
              {relationshipText}
            </span>
          </td>
                    <td className="px-3 py-2 whitespace-nowrap text-center">
                      <span className="inline-flex items-center justify-center min-w-[24px] px-2 py-0.5 text-base font-semibold text-primary-700 bg-primary-50 rounded">
                        {counts.active}
                      </span>
                    </td>
                    <td className="px-3 py-2 whitespace-nowrap text-center">
                      <span className="inline-flex items-center justify-center min-w-[24px] px-2 py-0.5 text-base font-semibold text-gray-900 bg-gray-100 rounded">
                        {counts.lapsed}
                      </span>
                    </td>
                    <td className="px-3 py-2 whitespace-nowrap text-center">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log(`Add ${activeHealthTab} for ${isRelationship ? 'relationship' : 'person'}:`, id);
                          // TODO: Implement add health/vulnerability functionality
                        }}
                        className="inline-flex items-center gap-1 px-2 py-1 text-xs font-medium text-primary-700 bg-primary-100 rounded hover:bg-primary-200 transition-colors"
                        title={`Add ${activeHealthTab === 'health' ? 'Health Item' : 'Vulnerability'}`}
                      >
                        <PlusIcon className="w-3 h-3" />
                        Add
                      </button>
                    </td>
                    <td className="px-3 py-2 whitespace-nowrap text-right text-base">
                      {isExpanded ? (
                        <ChevronDownIcon className="w-5 h-5 text-gray-900 inline" />
                      ) : (
                        <ChevronRightIcon className="w-5 h-5 text-gray-900 inline" />
                      )}
                    </td>
                  </tr>
                  {isExpanded && (
                    <tr>
                      <td colSpan={6} className="px-3 py-2 bg-gray-50">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-white">
                            <tr>
                              {activeHealthTab === 'health' ? (
                                <>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Name</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Condition</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Diagnosed</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Medication/Dosage</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Status</th>
                                  <th className="px-2 py-1 text-center text-base font-bold text-gray-900 uppercase tracking-wider">Actions</th>
                                </>
                              ) : (
                                <>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Description</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Adjustments</th>
                                  <th className="px-2 py-1 text-center text-base font-bold text-gray-900 uppercase tracking-wider">Diagnosed</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Recorded</th>
                                  <th className="px-2 py-1 text-left text-base font-bold text-gray-900 uppercase tracking-wider">Status</th>
                                  <th className="px-2 py-1 text-center text-base font-bold text-gray-900 uppercase tracking-wider">Actions</th>
                                </>
                              )}
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {items.map((item) => (
                              <tr
                                key={item.id}
                                className={`hover:bg-gray-50 cursor-pointer transition-colors ${
                                  item.status === 'Lapsed' ? 'opacity-40' : ''
                                }`}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onItemClick(item);
                                }}
                              >
                                {activeHealthTab === 'health' ? (
                                  <>
                                    <td className="px-2 py-1.5 text-base text-gray-900">{(item as HealthItem).name}</td>
                                    <td className="px-2 py-1.5 text-base text-gray-900 italic">{(item as HealthItem).type}</td>
                                    <td className="px-2 py-1.5 text-base text-gray-900">{(item as HealthItem).dateOfDiagnosis}</td>
                                    <td className="px-2 py-1.5 text-base text-gray-900">
                                      {(item as HealthItem).medication.length > 0 ? (item as HealthItem).medication.join(', ') : 'None'}
                                    </td>
                                    <td className="px-2 py-1.5 text-base">
                                      <span className={`px-1.5 py-0.5 rounded font-medium ${
                                        item.status === 'Active'
                                          ? 'bg-green-100 text-green-800'
                                          : 'bg-gray-200 text-gray-900'
                                      }`}>
                                        {item.status}
                                      </span>
                                    </td>
                                    <td className="px-2 py-1.5 text-center">
                                      <div className="flex items-center justify-center gap-2">
                                        <button
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            console.log('Lapse health item:', item.id);
                                            // TODO: Implement lapse functionality
                                          }}
                                          className="px-2 py-1 text-xs font-medium text-orange-700 bg-orange-100 rounded hover:bg-orange-200 transition-colors"
                                          title="Mark as Lapsed"
                                        >
                                          Lapse
                                        </button>
                                        <button
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            console.log('Delete health item:', item.id);
                                            // TODO: Implement delete functionality
                                          }}
                                          className="px-2 py-1 text-xs font-medium text-red-700 bg-red-100 rounded hover:bg-red-200 transition-colors"
                                          title="Delete item"
                                        >
                                          Delete
                                        </button>
                                      </div>
                                    </td>
                                  </>
                                ) : (
                                  <>
                                    <td className="px-2 py-1.5 text-base text-gray-900">{(item as VulnerabilityItem).vulnerabilityDescription}</td>
                                    <td className="px-2 py-1.5 text-base text-gray-900">{(item as VulnerabilityItem).adjustments}</td>
                                    <td className="px-2 py-1.5 text-center">
                                      <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold ${
                                        (item as VulnerabilityItem).diagnosed
                                          ? 'bg-blue-100 text-blue-800'
                                          : 'bg-gray-200 text-gray-700'
                                      }`}>
                                        {(item as VulnerabilityItem).diagnosed ? 'Yes' : 'No'}
                                      </span>
                                    </td>
                                    <td className="px-2 py-1.5 text-base text-gray-900">{item.dateRecorded}</td>
                                    <td className="px-2 py-1.5 text-base">
                                      <span className={`px-1.5 py-0.5 rounded font-medium ${
                                        item.status === 'Active'
                                          ? 'bg-green-100 text-green-800'
                                          : 'bg-gray-200 text-gray-900'
                                      }`}>
                                        {item.status}
                                      </span>
                                    </td>
                                    <td className="px-2 py-1.5 text-center">
                                      <div className="flex items-center justify-center gap-2">
                                        <button
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            console.log('Lapse vulnerability item:', item.id);
                                            // TODO: Implement lapse functionality
                                          }}
                                          className="px-2 py-1 text-xs font-medium text-orange-700 bg-orange-100 rounded hover:bg-orange-200 transition-colors"
                                          title="Mark as Lapsed"
                                        >
                                          Lapse
                                        </button>
                                        <button
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            console.log('Delete vulnerability item:', item.id);
                                            // TODO: Implement delete functionality
                                          }}
                                          className="px-2 py-1 text-xs font-medium text-red-700 bg-red-100 rounded hover:bg-red-200 transition-colors"
                                          title="Delete item"
                                        >
                                          Delete
                                        </button>
                                      </div>
                                    </td>
                                  </>
                                )}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </td>
                    </tr>
        )}
      </React.Fragment>
    );
  };

  return (
    <div className="space-y-4">
      {/* Sub-sub-section label */}
      <div className="text-center mb-2">
        <span className="text-sm font-semibold text-primary-600 uppercase tracking-wide">
          View Type
        </span>
      </div>
      {/* Sub-tabs with Option 5 styling - smaller, colored */}
      <div className="flex items-center justify-center mb-4">
        <div className="inline-flex items-center bg-primary-50 rounded-lg p-1 border border-primary-200 shadow-sm">
          <button
            onClick={() => setActiveHealthTab('health')}
            className={`flex items-center gap-1.5 px-3 py-1.5 rounded-md transition-all ${
              activeHealthTab === 'health'
                ? 'bg-primary-700 text-white shadow-md'
                : 'text-primary-700 hover:bg-primary-100 hover:text-primary-800'
            }`}
          >
            <span className="text-sm font-medium">Health</span>
          </button>
          <button
            onClick={() => setActiveHealthTab('vulnerability')}
            className={`flex items-center gap-1.5 px-3 py-1.5 rounded-md transition-all ${
              activeHealthTab === 'vulnerability'
                ? 'bg-primary-700 text-white shadow-md'
                : 'text-primary-700 hover:bg-primary-100 hover:text-primary-800'
            }`}
          >
            <span className="text-sm font-medium">Vulnerability</span>
          </button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md border border-gray-100 overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-3 py-2 text-left text-sm font-bold text-gray-900 uppercase tracking-wider">Name</th>
              <th className="px-3 py-2 text-left text-sm font-bold text-gray-900 uppercase tracking-wider">Relationship</th>
              <th className="px-3 py-2 text-center text-sm font-bold text-gray-900 uppercase tracking-wider">Active</th>
              <th className="px-3 py-2 text-center text-sm font-bold text-gray-900 uppercase tracking-wider">Lapsed</th>
              <th className="px-3 py-2 text-center text-sm font-bold text-gray-900 uppercase tracking-wider">Actions</th>
              <th className="px-3 py-2"></th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {sortedPeople.map((person) => renderEntityRow(person, false))}
            {activeRelationships.map((relationship) => renderEntityRow(relationship, true))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default HealthVulnerabilitySection;
