IRR CREATION VALIDATION PATCHES
==================================================


# PATCH 1: holding_activity_logs.py around line 448-460
# BEFORE:
portfolio_valuation_id = portfolio_valuation_result.data[0]["id"] if portfolio_valuation_result.data else None

portfolio_irr_data = {
    "portfolio_id": portfolio_id,
    "irr_result": float(portfolio_irr_percentage),
    "date": common_date,
    "portfolio_valuation_id": portfolio_valuation_id
}

db.table("portfolio_irr_values").insert(portfolio_irr_data).execute()

# AFTER:
portfolio_valuation_id = portfolio_valuation_result.data[0]["id"] if portfolio_valuation_result.data else None

# VALIDATION: Don't create IRR without portfolio valuation
if portfolio_valuation_id is None:
    logger.warning(f"No portfolio valuation found for portfolio {portfolio_id} on {common_date}. Creating portfolio valuation first...")
    
    # Calculate portfolio valuation by summing fund valuations
    total_valuation = await calculate_portfolio_valuation_for_date(portfolio_id, common_date, db)
    
    if total_valuation > 0:
        portfolio_valuation_data = {
            "portfolio_id": portfolio_id,
            "valuation_date": common_date,
            "valuation": total_valuation
        }
        
        valuation_create_result = db.table("portfolio_valuations").insert(portfolio_valuation_data).execute()
        if valuation_create_result.data:
            portfolio_valuation_id = valuation_create_result.data[0]["id"]
            logger.info(f"Created missing portfolio valuation {portfolio_valuation_id} for portfolio {portfolio_id}")
        else:
            logger.error(f"Failed to create portfolio valuation for portfolio {portfolio_id} on {common_date}")
            continue  # Skip IRR creation if we can't create valuation
    else:
        logger.error(f"Cannot calculate portfolio valuation for portfolio {portfolio_id} on {common_date} - no fund valuations found")
        continue  # Skip IRR creation

portfolio_irr_data = {
    "portfolio_id": portfolio_id,
    "irr_result": float(portfolio_irr_percentage),
    "date": common_date,
    "portfolio_valuation_id": portfolio_valuation_id  # Now guaranteed to be not None
}

db.table("portfolio_irr_values").insert(portfolio_irr_data).execute()



# PATCH 2: Add helper function to calculate portfolio valuation
async def calculate_portfolio_valuation_for_date(portfolio_id: int, date: str, db) -> float:
    '''
    Calculate total portfolio valuation for a specific date by summing fund valuations
    '''
    try:
        # Get all portfolio funds for this portfolio
        portfolio_funds = db.table("portfolio_funds")\
            .select("id")\
            .eq("portfolio_id", portfolio_id)\
            .execute()
        
        if not portfolio_funds.data:
            return 0.0
        
        fund_ids = [pf["id"] for pf in portfolio_funds.data]
        
        # Get fund valuations for this date
        fund_valuations = db.table("portfolio_fund_valuations")\
            .select("valuation")\
            .in_("portfolio_fund_id", fund_ids)\
            .eq("valuation_date", date)\
            .execute()
        
        total_valuation = sum(float(fv["valuation"]) for fv in fund_valuations.data)
        return total_valuation
        
    except Exception as e:
        logger.error(f"Error calculating portfolio valuation for {portfolio_id} on {date}: {str(e)}")
        return 0.0
