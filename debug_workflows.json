{
  "debugging_workflows": {
    "authentication_issues": {
      "description": "Systematic debugging of authentication and authorization problems",
      "common_symptoms": [
        "Login form not submitting",
        "Token validation failing", 
        "CORS errors in browser console",
        "Authentication redirects not working",
        "Session timeout issues",
        "Cookie not being set or read"
      ],
      "investigation_steps": [
        {
          "step": "Verify backend authentication configuration",
          "actions": [
            "Check DATABASE_URL in backend/.env",
            "Verify JWT_SECRET is configured",
            "Confirm ACCESS_TOKEN_EXPIRE_MINUTES setting",
            "Test backend/check_schema.py database connection"
          ]
        },
        {
          "step": "Analyze CORS and cookie settings",
          "actions": [
            "Review CORS middleware in backend/main.py",
            "Verify allow_credentials=True setting",
            "Check httpOnly and sameSite cookie configuration",
            "Confirm frontend origin is in CORS allowed origins"
          ]
        },
        {
          "step": "Test authentication endpoints",
          "actions": [
            "POST /api/auth/login with valid credentials",
            "Verify response includes httpOnly cookie",
            "Test protected endpoint with cookie authentication",
            "Check token validation logic in security.py"
          ]
        },
        {
          "step": "Debug frontend authentication flow",
          "actions": [
            "Inspect AuthContext.tsx state management",
            "Check login form submission handling",
            "Verify cookie handling in API requests",
            "Test authentication persistence across page refreshes"
          ]
        }
      ],
      "key_files": [
        "backend/main.py",
        "backend/app/utils/security.py",
        "backend/app/api/routes/auth.py",
        "frontend/src/context/AuthContext.tsx",
        "frontend/src/components/auth/LoginForm.tsx"
      ]
    },

    "database_connectivity": {
      "description": "Debugging database connection and data integrity issues",
      "common_symptoms": [
        "Database connection errors",
        "Foreign key constraint violations",
        "Data not appearing in UI",
        "Query timeout errors",
        "Migration script failures",
        "View or table not found errors"
      ],
      "investigation_steps": [
        {
          "step": "Verify database configuration",
          "actions": [
            "Check DATABASE_URL format and credentials",
            "Test PostgreSQL service is running",
            "Verify database and schema exist",
            "Run python backend/check_schema.py"
          ]
        },
        {
          "step": "Analyze schema and migrations",
          "actions": [
            "Compare database.sql with actual database schema",
            "Check migration_scripts/ for recent changes",
            "Verify foreign key relationships are intact",
            "Test data integrity constraints"
          ]
        },
        {
          "step": "Debug data flow issues",
          "actions": [
            "Trace data path: Frontend → API → Database",
            "Check Pydantic model validation",
            "Verify SQL query syntax and parameters",
            "Test database queries directly with psql"
          ]
        },
        {
          "step": "Performance and view analysis",
          "actions": [
            "Check analytics views are populated",
            "Verify pre-computed cache tables",
            "Analyze slow query performance",
            "Test view refresh mechanisms"
          ]
        }
      ],
      "key_files": [
        "backend/app/db/database.py",
        "backend/check_schema.py",
        "database.sql",
        "migration_scripts/",
        "backend/database_analysis_report.py"
      ]
    },

    "performance_analytics": {
      "description": "Debugging performance bottlenecks and analytics system issues",
      "common_symptoms": [
        "Analytics dashboard loading slowly",
        "IRR calculations taking too long",
        "React Query cache misses",
        "Database query timeouts",
        "Frontend UI freezing during data loads",
        "Analytics views returning stale data"
      ],
      "investigation_steps": [
        {
          "step": "Analyze analytics system performance",
          "actions": [
            "Check company_irr_cache view status",
            "Verify analytics_dashboard_summary is populated",
            "Test /api/analytics/dashboard-fast endpoint",
            "Monitor cache refresh background processes"
          ]
        },
        {
          "step": "Debug database performance",
          "actions": [
            "Identify slow queries with EXPLAIN ANALYZE",
            "Check database indexes on frequently queried columns",
            "Verify view materialization is working",
            "Test bulk data endpoint performance"
          ]
        },
        {
          "step": "Frontend performance analysis",
          "actions": [
            "Profile React component rendering times",
            "Check React Query cache configuration",
            "Analyze network waterfall in browser DevTools",
            "Test lazy loading and code splitting"
          ]
        },
        {
          "step": "IRR calculation optimization",
          "actions": [
            "Verify numpy-financial calculations",
            "Check IRR service caching mechanisms",
            "Test portfolio fund calculation batching",
            "Analyze mathematical accuracy vs performance trade-offs"
          ]
        }
      ],
      "key_files": [
        "backend/app/api/routes/analytics.py",
        "backend/app/services/irr_calculation.py", 
        "frontend/src/services/irrCalculationService.ts",
        "frontend/src/pages/Dashboard.tsx",
        "frontend/src/App.tsx"
      ]
    },

    "portfolio_workflow_issues": {
      "description": "Debugging complex portfolio and fund management workflows",
      "common_symptoms": [
        "Portfolio creation failing",
        "Fund allocation errors",
        "Cascade operations not working",
        "Data synchronization issues",
        "Activity log entries missing",
        "Provider switching failures"
      ],
      "investigation_steps": [
        {
          "step": "Trace portfolio hierarchy integrity",
          "actions": [
            "Verify client_groups → product_owners relationship",
            "Check client_products → portfolios linkage",
            "Validate portfolios → portfolio_funds connections",
            "Test foreign key constraints across hierarchy"
          ]
        },
        {
          "step": "Debug workflow transaction integrity",
          "actions": [
            "Check transaction coordination in workflow services",
            "Verify rollback mechanisms on failure",
            "Test atomic operations for multi-table updates",
            "Analyze activity_log entries for audit trail"
          ]
        },
        {
          "step": "Validate business logic implementation",
          "actions": [
            "Test portfolio fund allocation calculations",
            "Verify provider switching logic",
            "Check template portfolio generation",
            "Validate valuation update mechanisms"
          ]
        },
        {
          "step": "Frontend workflow coordination",
          "actions": [
            "Test form validation and submission",
            "Verify multi-step workflow state management",
            "Check error handling and user feedback",
            "Test navigation between workflow steps"
          ]
        }
      ],
      "key_files": [
        "backend/app/api/routes/portfolios.py",
        "backend/app/api/routes/funds.py",
        "backend/app/services/",
        "frontend/src/pages/PortfolioManagement.tsx",
        "frontend/src/pages/FundManagement.tsx"
      ]
    },

    "report_generation_issues": {
      "description": "Debugging report generation and data export problems",
      "common_symptoms": [
        "Report generation failing",
        "PDF export not working",
        "Data validation errors",
        "Print formatting issues",
        "End date validation problems",
        "Report data inconsistencies"
      ],
      "investigation_steps": [
        {
          "step": "Debug report data aggregation",
          "actions": [
            "Verify data source queries",
            "Check date range validation logic",
            "Test portfolio fund valuation calculations",
            "Validate IRR calculation accuracy"
          ]
        },
        {
          "step": "Analyze report generation pipeline",
          "actions": [
            "Test ReportContainer component flow",
            "Check SummaryTab and IRRHistoryTab data loading",
            "Verify ReportStateManager state coordination",
            "Test print service functionality"
          ]
        },
        {
          "step": "Frontend report component debugging",
          "actions": [
            "Check form validation and user input handling",
            "Test report preview and generation flow",
            "Verify error boundary handling",
            "Analyze print CSS and layout issues"
          ]
        },
        {
          "step": "Backend report API validation",
          "actions": [
            "Test report generation endpoints",
            "Verify Pydantic model validation",
            "Check report data serialization",
            "Test bulk data retrieval for reports"
          ]
        }
      ],
      "key_files": [
        "backend/app/api/routes/reports.py",
        "frontend/src/pages/ReportGenerator.tsx",
        "frontend/src/services/reportService.ts",
        "frontend/src/components/report/",
        "frontend/src/services/ReportStateManager.ts"
      ]
    }
  },

  "common_error_patterns": {
    "cors_errors": {
      "symptoms": ["Access-Control-Allow-Origin errors", "Preflight request failures"],
      "quick_fixes": [
        "Check CORS middleware configuration in backend/main.py",
        "Verify frontend origin is in allowed origins",
        "Ensure allow_credentials=True for cookie authentication"
      ]
    },
    
    "jwt_token_issues": {
      "symptoms": ["Token validation failed", "401 Unauthorized", "Token expired"],
      "quick_fixes": [
        "Check JWT_SECRET configuration",
        "Verify token expiration settings",
        "Test token generation and validation logic"
      ]
    },
    
    "database_connection_failed": {
      "symptoms": ["Connection refused", "Database does not exist", "Authentication failed"],
      "quick_fixes": [
        "Verify DATABASE_URL format",
        "Check PostgreSQL service status",
        "Test connection with psql command"
      ]
    },
    
    "react_query_cache_issues": {
      "symptoms": ["Stale data displayed", "Infinite loading states", "Cache invalidation problems"],
      "quick_fixes": [
        "Check React Query configuration in App.tsx",
        "Verify cache invalidation keys",
        "Test manual cache refresh mechanisms"
      ]
    },
    
    "pydantic_validation_errors": {
      "symptoms": ["422 Unprocessable Entity", "Field validation errors", "Type conversion failures"],
      "quick_fixes": [
        "Check Pydantic model definitions",
        "Verify frontend data format matches backend expectations",
        "Test API request payload structure"
      ]
    }
  },

  "performance_optimization_strategies": {
    "database_optimization": [
      "Use pre-computed views for complex aggregations",
      "Implement proper database indexing",
      "Optimize N+1 query patterns with joins",
      "Use bulk operations for large datasets"
    ],
    
    "frontend_optimization": [
      "Leverage React Query caching with appropriate staleTime",
      "Implement lazy loading for large components",
      "Use virtualization for long lists",
      "Optimize bundle size with code splitting"
    ],
    
    "api_optimization": [
      "Design bulk endpoints for related data",
      "Implement response pagination",
      "Use background processing for expensive operations",
      "Cache frequently accessed data"
    ]
  },

  "testing_strategies": {
    "london_school_tdd": {
      "description": "Outside-in development with mocks and dependency injection",
      "steps": [
        "Write acceptance test defining behavior from user perspective",
        "Create failing unit tests that specify component interfaces",
        "Mock external dependencies to isolate units under test",
        "Implement minimal code to make tests pass",
        "Refactor while keeping tests green"
      ]
    },
    
    "integration_testing": {
      "description": "End-to-end workflow testing",
      "approaches": [
        "Test complete user workflows across full stack",
        "Verify database transactions and rollback scenarios",
        "Test authentication flow with real tokens",
        "Validate API contracts between frontend and backend"
      ]
    }
  },

  "emergency_recovery_procedures": {
    "database_corruption": [
      "Stop all application services immediately",
      "Restore from latest backup",
      "Run database integrity checks",
      "Verify data consistency before restarting services"
    ],
    
    "authentication_lockout": [
      "Check JWT_SECRET configuration",
      "Verify database user authentication tables",
      "Reset admin credentials if necessary",
      "Test authentication flow in isolation"
    ],
    
    "performance_degradation": [
      "Check analytics cache status",
      "Refresh pre-computed views",
      "Analyze slow query logs",
      "Implement emergency performance optimizations"
    ]
  }
}