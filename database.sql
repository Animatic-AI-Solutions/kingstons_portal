-- =========================================================
-- Drop Existing Objects (Updated List)
-- =========================================================
-- Drop Views first to remove dependencies
DROP VIEW IF EXISTS public.portfolio_fund_providers CASCADE; -- View depends on removed product_funds
DROP VIEW IF EXISTS public.latest_irr_values CASCADE;
DROP VIEW IF EXISTS public.latest_fund_valuations CASCADE;
DROP VIEW IF EXISTS public.client_fum_summary CASCADE; -- Old view to be replaced
DROP VIEW IF EXISTS public.client_group_fum_summary CASCADE; -- New view based on client_groups
DROP VIEW IF EXISTS public.product_value_irr_summary CASCADE;
DROP VIEW IF EXISTS public.product_owner_details CASCADE; -- New view for product owners
DROP TABLE IF EXISTS public.template_portfolio_generations CASCADE;
DROP TABLE IF EXISTS public.client_group_product_owners CASCADE; -- New junction table

-- Drop Tables (Order matters for FKs, CASCADE helps)
DROP TABLE IF EXISTS public.holding_activity_log CASCADE;
DROP TABLE IF EXISTS public.irr_values CASCADE;
DROP TABLE IF EXISTS public.fund_valuations CASCADE;
DROP TABLE IF EXISTS public.product_holdings CASCADE; -- New name
DROP TABLE IF EXISTS public.product_owner_products CASCADE; -- New junction table
DROP TABLE IF EXISTS public.portfolio_funds CASCADE;
DROP TABLE IF EXISTS public.available_portfolio_funds CASCADE;
DROP TABLE IF EXISTS public.client_products CASCADE; -- New name
DROP TABLE IF EXISTS public.product_funds CASCADE; -- Removed table
DROP TABLE IF EXISTS public.available_funds CASCADE;
DROP TABLE IF EXISTS public.portfolios CASCADE;
DROP TABLE IF EXISTS public.available_portfolios CASCADE;
DROP TABLE IF EXISTS public.available_products CASCADE; -- Removed table
DROP TABLE IF EXISTS public.session CASCADE; -- Corrected name if 'sessions' was typo
DROP TABLE IF EXISTS public.authentication CASCADE;
DROP TABLE IF EXISTS public.available_providers CASCADE;
DROP TABLE IF EXISTS public.product_owners CASCADE; -- New table
DROP TABLE IF EXISTS public.client_groups CASCADE; -- Renamed from clients
DROP TABLE IF EXISTS public.clients CASCADE; -- Old table name, kept for backward compatibility
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.fund_performance_history CASCADE; -- Removed table

-- =========================================================
-- Level 1 Tables (Generally no FK dependencies)
-- =========================================================

CREATE TABLE public.profiles (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    first_name text NULL,
    last_name text NULL,
    email text NULL,
    profile_picture_url text NULL DEFAULT '/images/Companylogo2.png'::text,
    preferred_client_view text NULL DEFAULT 'list'::text,
    preferred_landing_page text NULL DEFAULT '/'::text,
    CONSTRAINT profiles_pkey PRIMARY KEY (id) -- Renamed constraint for consistency
) TABLESPACE pg_default;

CREATE TABLE public.available_providers (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name text NULL,
    status text NOT NULL DEFAULT 'active'::text,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    theme_color text NULL,
    CONSTRAINT available_providers_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Replaced with client_groups
CREATE TABLE public.client_groups (
  id bigint generated by default as identity not null,
  advisor text null,
  status text null default 'active'::text,
  created_at timestamp with time zone not null default now(),
  name text null,
  type text null default 'Family'::text,
  constraint clients_pkey primary key (id)
) TABLESPACE pg_default;

-- New product_owners table
CREATE TABLE public.product_owners (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  status text null default 'active'::text,
  name text null,
  constraint product_owners_pkey primary key (id)
) TABLESPACE pg_default;

CREATE TABLE public.available_funds (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    fund_name text NULL,
    isin_number text NULL,
    risk_factor smallint NULL,
    fund_cost numeric(6, 2) NULL,
    status text NULL DEFAULT 'active'::text,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    CONSTRAINT available_funds_pkey PRIMARY KEY (id),
    CONSTRAINT available_funds_isin_number_key UNIQUE (isin_number)
) TABLESPACE pg_default;

-- Portfolio templates (Removed link to available_products)
CREATE TABLE public.available_portfolios (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    name text NULL,
    CONSTRAINT available_portfolios_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- =========================================================
-- Level 2 Tables (Depend on Level 1)
-- =========================================================

-- Portfolio Template Generations (Versions of Available Portfolios)
CREATE TABLE public.template_portfolio_generations (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    available_portfolio_id bigint NOT NULL, -- FK to available_portfolios (the overarching template)
    version_number integer NOT NULL,         -- To order and identify generations (e.g., 1, 2, 3)
    generation_name text NULL,               -- A descriptive name for this specific generation (e.g., "Q1 2024 Conservative")
    description text NULL,                   -- Optional detailed description of the generation
    status text NOT NULL DEFAULT 'active'::text, -- e.g., 'draft', 'active', 'archived'
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    updated_at timestamp WITH time zone NOT NULL DEFAULT now(), -- Tracks changes to generation details
    CONSTRAINT template_portfolio_generations_pkey PRIMARY KEY (id),
    CONSTRAINT template_portfolio_generations_available_portfolio_id_fkey FOREIGN KEY (available_portfolio_id) REFERENCES public.available_portfolios (id) ON DELETE CASCADE,
    CONSTRAINT uq_available_portfolio_version UNIQUE (available_portfolio_id, version_number) -- Ensures each version number is unique per portfolio
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_tpg_available_portfolio_id ON public.template_portfolio_generations USING btree (available_portfolio_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_tpg_status ON public.template_portfolio_generations USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_tpg_version_number ON public.template_portfolio_generations USING btree (version_number) TABLESPACE pg_default;


CREATE TABLE public.authentication (
    auth_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    password_hash text NULL,
    last_login timestamp WITH time zone NULL,
    updated_at timestamp WITH time zone NULL,
    profiles_id bigint NULL,
    CONSTRAINT authentication_pkey PRIMARY KEY (auth_id),
    CONSTRAINT authentication_profiles_id_fkey FOREIGN KEY (profiles_id) REFERENCES public.profiles (id)
) TABLESPACE pg_default;

CREATE TABLE public.session (
    session_id text NOT NULL,
    profiles_id bigint NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    expires_at timestamp WITH time zone NULL,
    last_activity timestamp WITH time zone NULL,
    CONSTRAINT session_pkey PRIMARY KEY (session_id),
    CONSTRAINT session_profiles_id_fkey FOREIGN KEY (profiles_id) REFERENCES public.profiles (id)
) TABLESPACE pg_default;

-- Junction table between client_groups and product_owners
CREATE TABLE public.client_group_product_owners (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  product_owner_id bigint null,
  client_group_id bigint null,
  constraint client_group_product_owners_pkey primary key (id),
  constraint client_group_product_owners_client_group_id_fkey foreign KEY (client_group_id) references client_groups (id),
  constraint client_group_product_owners_product_owner_id_fkey foreign KEY (product_owner_id) references product_owners (id)
) TABLESPACE pg_default;

-- Portfolio instances (Added link back to template)
create table public.portfolios (
  id bigint generated by default as identity not null,
  portfolio_name text null,
  status text null default 'active'::text,
  start_date date null,
  end_date date null,
  created_at timestamp with time zone not null default now(),
  template_generation_id bigint null,
  constraint portfolios_pkey primary key (id),
  constraint portfolios_template_generation_id_fkey foreign KEY (template_generation_id) references template_portfolio_generations (id)
) TABLESPACE pg_default;

-- Funds associated with portfolio template generations
CREATE TABLE public.available_portfolio_funds (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    template_portfolio_generation_id bigint NULL,
    fund_id bigint NULL,
    target_weighting numeric(5, 2) NULL,
    CONSTRAINT available_portfolio_funds_pkey PRIMARY KEY (id),
    CONSTRAINT available_portfolio_funds_fund_id_fkey FOREIGN KEY (fund_id) REFERENCES public.available_funds (id),
    CONSTRAINT available_portfolio_funds_template_portfolio_generation_id_fkey FOREIGN KEY (template_portfolio_generation_id) REFERENCES public.template_portfolio_generations (id) ON DELETE CASCADE -- Updated FK
) TABLESPACE pg_default;

-- =========================================================
-- Level 3 Tables (Depend on Levels 1 & 2)
-- =========================================================

-- Replaced client_accounts, now client relationship managed through product_owners
-- Note: foreign key updated from clients to client_groups
create table public.client_products (
  id bigint generated by default as identity not null,
  client_id bigint not null,
  product_name text null,
  status text not null default 'active'::text,
  start_date date not null,
  end_date date null,
  created_at timestamp with time zone not null default now(),
  plan_number text null,
  provider_id bigint null,
  product_type text null,
  portfolio_id bigint null,
  notes text null,
  constraint client_products_pkey primary key (id),
  constraint client_products_client_id_fkey foreign KEY (client_id) references client_groups (id),
  constraint client_products_portfolio_id_fkey foreign KEY (portfolio_id) references portfolios (id),
  constraint client_products_provider_id_fkey foreign KEY (provider_id) references available_providers (id)
) TABLESPACE pg_default;

-- Junction table between product_owners and products
CREATE TABLE public.product_owner_products (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  product_owner_id bigint null,
  product_id bigint null,
  constraint product_owner_products_pkey primary key (id),
  constraint product_owner_products_product_id_fkey foreign KEY (product_id) references client_products (id),
  constraint product_owner_products_product_owner_id_fkey foreign KEY (product_owner_id) references product_owners (id)
) TABLESPACE pg_default;

create index IF not exists idx_client_products_client_id on public.client_products using btree (client_id) TABLESPACE pg_default;

create index IF not exists idx_client_products_status on public.client_products using btree (status) TABLESPACE pg_default;

create index IF not exists idx_client_products_start_date on public.client_products using btree (start_date) TABLESPACE pg_default;

create index IF not exists idx_client_products_provider_id on public.client_products using btree (provider_id) TABLESPACE pg_default
where
  (provider_id is not null);

-- Provider switch history tracking
CREATE TABLE public.provider_switch_log (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_product_id bigint NOT NULL,
    switch_date timestamptz NOT NULL DEFAULT now(),
    previous_provider_id bigint NULL,
    new_provider_id bigint NOT NULL,
    description text NULL,
    created_at timestamptz NOT NULL DEFAULT now(),

    CONSTRAINT fk_client_product
        FOREIGN KEY(client_product_id)
        REFERENCES public.client_products(id)
        ON DELETE CASCADE,

    CONSTRAINT fk_previous_provider
        FOREIGN KEY(previous_provider_id)
        REFERENCES public.available_providers(id)
        ON DELETE SET NULL,

    CONSTRAINT fk_new_provider
        FOREIGN KEY(new_provider_id)
        REFERENCES public.available_providers(id)
        ON DELETE RESTRICT
);

COMMENT ON TABLE public.provider_switch_log IS 'Logs provider switches for client products, including the date and reason.';
COMMENT ON COLUMN public.provider_switch_log.client_product_id IS 'The product that underwent a provider switch.';
COMMENT ON COLUMN public.provider_switch_log.switch_date IS 'The date the provider switch occurred or became effective.';
COMMENT ON COLUMN public.provider_switch_log.previous_provider_id IS 'The provider before the switch.';
COMMENT ON COLUMN public.provider_switch_log.new_provider_id IS 'The provider after the switch.';
COMMENT ON COLUMN public.provider_switch_log.description IS 'A short description or reason for the provider switch.';

-- *** NEW definition for portfolio_funds as requested ***
-- Funds within specific portfolio instances (weighting column renamed from target_weighting)
create table public.portfolio_funds (
  id bigint generated by default as identity not null,
  portfolio_id bigint not null,
  available_funds_id bigint not null,
  target_weighting numeric(5, 2) null,
  start_date date not null,
  end_date date null,
  created_at timestamp with time zone not null default now(),
  amount_invested numeric(16, 2) null,
  status text null default 'active'::text,
  constraint portfolio_funds_pkey primary key (id),
  constraint portfolio_funds_available_funds_id_fkey foreign KEY (available_funds_id) references available_funds (id),
  constraint portfolio_funds_portfolio_id_fkey foreign KEY (portfolio_id) references portfolios (id)
) TABLESPACE pg_default;

create index IF not exists idx_portfolio_funds_portfolio_id on public.portfolio_funds using btree (portfolio_id) TABLESPACE pg_default;

create index IF not exists idx_portfolio_funds_available_funds on public.portfolio_funds using btree (available_funds_id) TABLESPACE pg_default;

create index IF not exists idx_portfolio_funds_amount_invested on public.portfolio_funds using btree (amount_invested) TABLESPACE pg_default;

create index IF not exists idx_portfolio_funds_status on public.portfolio_funds using btree (end_date) TABLESPACE pg_default;

create index IF not exists idx_portfolio_funds_dates_status on public.portfolio_funds using btree (start_date, end_date) TABLESPACE pg_default;
-- *** END NEW definition for portfolio_funds ***

-- =========================================================
-- Level 4 Tables (Depend on Level 3)
-- =========================================================

-- Valuations of specific funds within portfolio instances
CREATE TABLE public.fund_valuations (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    portfolio_fund_id bigint NOT NULL, -- FK to portfolio_funds
    valuation_date timestamp WITHOUT time zone NOT NULL,
    value numeric(16, 2) NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    CONSTRAINT fund_valuations_pkey PRIMARY KEY (id),
    CONSTRAINT fund_valuations_portfolio_fund_id_fkey FOREIGN KEY (portfolio_fund_id) REFERENCES public.portfolio_funds (id)
) TABLESPACE pg_default;

-- =========================================================
-- Level 5 Tables (Depend on Level 4)
-- =========================================================


-- Activity log, references product_holdings now
create table public.holding_activity_log (
  id bigint generated by default as identity not null,
  product_id bigint not null,
  portfolio_fund_id bigint not null,
  activity_timestamp date not null,
  activity_type text not null,
  amount numeric(16, 2) null,
  created_at timestamp with time zone not null default now(),
  related_fund bigint null,
  constraint holding_activity_log_pkey primary key (id),
  constraint holding_activity_log_portfolio_fund_id_fkey foreign KEY (portfolio_fund_id) references portfolio_funds (id),
  constraint holding_activity_log_related_fund_fkey foreign KEY (related_fund) references portfolio_funds (id)
) TABLESPACE pg_default;

create index IF not exists idx_holding_activity_log_type_date on public.holding_activity_log using btree (activity_type, activity_timestamp) TABLESPACE pg_default;

create index IF not exists idx_holding_activity_log_product_holding on public.holding_activity_log using btree (product_id) TABLESPACE pg_default;

CREATE TABLE public.irr_values (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    irr_result numeric(7, 2) NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    date timestamp WITHOUT time zone NULL,
    fund_id bigint NULL, -- FK to portfolio_funds
    fund_valuation_id bigint NULL, -- FK to fund_valuations
    CONSTRAINT irr_values_pkey PRIMARY KEY (id),
    CONSTRAINT irr_values_fund_id_fkey FOREIGN KEY (fund_id) REFERENCES public.portfolio_funds (id),
    CONSTRAINT irr_values_fund_valuation_id_fkey FOREIGN KEY (fund_valuation_id) REFERENCES public.fund_valuations (id)

) TABLESPACE pg_default;

-- =========================================================
-- Level 6 Tables (Scheduled Transactions System)
-- =========================================================

-- Scheduled transactions table
CREATE TABLE public.scheduled_transactions (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at timestamp WITH time zone NOT NULL DEFAULT now(),
    updated_at timestamp WITH time zone NOT NULL DEFAULT now(),
    
    -- Basic transaction details
    portfolio_fund_id bigint NOT NULL,
    transaction_type text NOT NULL CHECK (transaction_type IN ('Investment', 'RegularInvestment', 'Withdrawal', 'RegularWithdrawal')),
    amount numeric(15, 2) NOT NULL CHECK (amount > 0),
    
    -- Scheduling details
    execution_day smallint NOT NULL CHECK (execution_day >= 1 AND execution_day <= 31),
    next_execution_date date NOT NULL,
    
    -- Recurrence details
    is_recurring boolean NOT NULL DEFAULT false,
    recurrence_interval text NULL CHECK (recurrence_interval IN ('monthly', 'quarterly', 'annually')),
    
    -- Status and control
    status text NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'paused', 'cancelled', 'completed')),
    last_executed_date date NULL,
    total_executions integer NOT NULL DEFAULT 0,
    max_executions integer NULL, -- NULL means unlimited
    
    -- Metadata
    description text NULL,
    created_by bigint NULL,
    
    CONSTRAINT scheduled_transactions_pkey PRIMARY KEY (id),
    CONSTRAINT scheduled_transactions_portfolio_fund_id_fkey 
        FOREIGN KEY (portfolio_fund_id) REFERENCES public.portfolio_funds (id) ON DELETE CASCADE,
    CONSTRAINT scheduled_transactions_created_by_fkey 
        FOREIGN KEY (created_by) REFERENCES public.profiles (id)
) TABLESPACE pg_default;

-- Scheduled transaction executions log
CREATE TABLE public.scheduled_transaction_executions (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    scheduled_transaction_id bigint NOT NULL,
    execution_date date NOT NULL,
    execution_timestamp timestamp WITH time zone NOT NULL DEFAULT now(),
    
    -- Results
    status text NOT NULL CHECK (status IN ('success', 'failed', 'skipped')),
    activity_log_id bigint NULL, -- Reference to created holding_activity_log entry
    error_message text NULL,
    
    -- Execution details
    executed_amount numeric(15, 2) NOT NULL CHECK (executed_amount > 0),
    notes text NULL,
    
    CONSTRAINT scheduled_transaction_executions_pkey PRIMARY KEY (id),
    CONSTRAINT ste_scheduled_transaction_id_fkey 
        FOREIGN KEY (scheduled_transaction_id) REFERENCES public.scheduled_transactions (id) ON DELETE CASCADE,
    CONSTRAINT ste_activity_log_id_fkey 
        FOREIGN KEY (activity_log_id) REFERENCES public.holding_activity_log (id)
) TABLESPACE pg_default;

-- =========================================================
-- Indexes (Updated List)
-- =========================================================


-- Indexes for client_products
CREATE INDEX IF NOT EXISTS idx_client_products_client_id ON public.client_products USING btree (client_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_products_status ON public.client_products USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_products_start_date ON public.client_products USING btree (start_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_products_provider_id ON public.client_products USING btree (provider_id) TABLESPACE pg_default WHERE (provider_id IS NOT NULL);

-- Indexes for client_groups
CREATE INDEX IF NOT EXISTS idx_client_groups_status ON public.client_groups USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_groups_advisor ON public.client_groups USING btree (advisor) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_groups_name ON public.client_groups USING btree (name) TABLESPACE pg_default;

-- Indexes for product_owners
CREATE INDEX IF NOT EXISTS idx_product_owners_status ON public.product_owners USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_product_owners_name ON public.product_owners USING btree (name) TABLESPACE pg_default;

-- Indexes for junction tables
CREATE INDEX IF NOT EXISTS idx_client_group_product_owners_client_group_id ON public.client_group_product_owners USING btree (client_group_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_client_group_product_owners_product_owner_id ON public.client_group_product_owners USING btree (product_owner_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_product_owner_products_product_owner_id ON public.product_owner_products USING btree (product_owner_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_product_owner_products_product_id ON public.product_owner_products USING btree (product_id) TABLESPACE pg_default;

-- Indexes for product_holdings
CREATE INDEX IF NOT EXISTS idx_product_holdings_client_product_id ON public.product_holdings USING btree (client_product_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_product_holdings_portfolio_id ON public.product_holdings USING btree (portfolio_id) TABLESPACE pg_default WHERE (portfolio_id IS NOT NULL);
CREATE INDEX IF NOT EXISTS idx_product_holdings_status_dates ON public.product_holdings USING btree (status, start_date, end_date) TABLESPACE pg_default;

-- Indexes for holding_activity_log
CREATE INDEX IF NOT EXISTS idx_holding_activity_log_type_date ON public.holding_activity_log USING btree (activity_type, activity_timestamp) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_holding_activity_log_product_holding ON public.holding_activity_log USING btree (product_id) TABLESPACE pg_default;

-- Indexes for portfolios
CREATE INDEX IF NOT EXISTS idx_portfolios_start_date ON public.portfolios USING btree (start_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_portfolios_template_generation_id ON public.portfolios USING btree (template_generation_id) TABLESPACE pg_default WHERE (template_generation_id IS NOT NULL);

-- *** NEW Indexes for portfolio_funds as requested ***
CREATE INDEX IF NOT EXISTS idx_portfolio_funds_available_funds ON public.portfolio_funds USING btree (available_funds_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_portfolio_funds_amount_invested ON public.portfolio_funds USING btree (amount_invested) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_portfolio_funds_status ON public.portfolio_funds USING btree (end_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_portfolio_funds_dates_status ON public.portfolio_funds USING btree (start_date, end_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_portfolio_funds_portfolio_id ON public.portfolio_funds (portfolio_id);
-- *** END NEW Indexes for portfolio_funds ***

-- Indexes for fund_valuations
CREATE UNIQUE INDEX IF NOT EXISTS idx_fund_valuations_unique ON public.fund_valuations (portfolio_fund_id, valuation_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fund_valuations_date ON public.fund_valuations USING btree (valuation_date DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fund_valuations_portfolio_fund_date ON public.fund_valuations USING btree (portfolio_fund_id, valuation_date DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fund_valuations_value ON public.fund_valuations USING btree (value) TABLESPACE pg_default;
-- Removed potentially redundant index: idx_fund_valuations_fund_date

-- Indexes for irr_values
CREATE INDEX IF NOT EXISTS idx_irr_values_date ON public.irr_values USING btree (fund_id, date DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_irr_values_fund_date_value ON public.irr_values USING btree (fund_id, date DESC, irr_result) TABLESPACE pg_default; -- Corrected column name
CREATE INDEX IF NOT EXISTS idx_irr_values_fund_valuation_id ON public.irr_values USING btree (fund_valuation_id) TABLESPACE pg_default;

-- Indexes for scheduled_transactions
CREATE INDEX IF NOT EXISTS idx_scheduled_transactions_portfolio_fund_id ON public.scheduled_transactions USING btree (portfolio_fund_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_scheduled_transactions_next_execution ON public.scheduled_transactions USING btree (next_execution_date, status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_scheduled_transactions_status ON public.scheduled_transactions USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_scheduled_transactions_type ON public.scheduled_transactions USING btree (transaction_type) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_scheduled_transactions_created_by ON public.scheduled_transactions USING btree (created_by) TABLESPACE pg_default WHERE (created_by IS NOT NULL);

-- Indexes for scheduled_transaction_executions
CREATE INDEX IF NOT EXISTS idx_ste_scheduled_transaction_id ON public.scheduled_transaction_executions USING btree (scheduled_transaction_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_ste_execution_date ON public.scheduled_transaction_executions USING btree (execution_date) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_ste_status ON public.scheduled_transaction_executions USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_ste_activity_log_id ON public.scheduled_transaction_executions USING btree (activity_log_id) TABLESPACE pg_default WHERE (activity_log_id IS NOT NULL);

-- Indexes for available_funds
CREATE INDEX IF NOT EXISTS idx_available_funds_status ON public.available_funds USING btree (status) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_available_funds_reporting ON public.available_funds USING btree (id, fund_name, status) TABLESPACE pg_default;

-- Indexes for available_portfolio_fundsCREATE INDEX IF NOT EXISTS idx_available_portfolio_funds_template_generation_id ON public.available_portfolio_funds USING btree (template_portfolio_generation_id) TABLESPACE pg_default WHERE (template_portfolio_generation_id IS NOT NULL);CREATE INDEX IF NOT EXISTS idx_available_portfolio_funds_fund_id ON public.available_portfolio_funds USING btree (fund_id) TABLESPACE pg_default WHERE (fund_id IS NOT NULL);

-- In the indexes section, add:
CREATE INDEX IF NOT EXISTS idx_provider_switch_log_client_product_id ON public.provider_switch_log(client_product_id);
CREATE INDEX IF NOT EXISTS idx_provider_switch_log_switch_date ON public.provider_switch_log(switch_date);
CREATE INDEX IF NOT EXISTS idx_provider_switch_log_providers ON public.provider_switch_log(previous_provider_id, new_provider_id);

-- Text Search Indexes (Optional - requires pg_trgm extension enabled by superuser)
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;
-- CREATE INDEX IF NOT EXISTS idx_client_groups_name_trigram ON public.client_groups USING gin (name gin_trgm_ops);
-- CREATE INDEX IF NOT EXISTS idx_product_owners_name_trigram ON public.product_owners USING gin (name gin_trgm_ops);
-- CREATE INDEX IF NOT EXISTS idx_available_funds_name_trigram ON public.available_funds USING gin (fund_name gin_trgm_ops);


-- =========================================================
-- Views (Updated List)
-- =========================================================

-- View for latest IRR values (Corrected column reference)
CREATE OR REPLACE VIEW public.latest_irr_values AS
SELECT DISTINCT ON (irr_values.fund_id)
    irr_values.fund_id,
    irr_values.irr_result AS irr_value,
    irr_values.date AS irr_date,
    irr_values.fund_valuation_id
FROM
    public.irr_values
ORDER BY
    irr_values.fund_id,
    irr_values.date DESC;

-- View for latest fund valuations
CREATE VIEW public.latest_fund_valuations AS
SELECT DISTINCT
    ON (fund_valuations.portfolio_fund_id) fund_valuations.id,
    fund_valuations.portfolio_fund_id,
    fund_valuations.valuation_date,
    fund_valuations.value
FROM
    public.fund_valuations
ORDER BY
    fund_valuations.portfolio_fund_id,
    fund_valuations.valuation_date DESC;

CREATE OR REPLACE VIEW public.product_value_irr_summary AS
SELECT
    cp.id AS client_product_id,
    -- Total value: sum of latest valuations for each fund
    SUM(lfv.value) AS total_value,
    -- Weighted IRR: sum(value_at_irr * irr) / sum(value_at_irr)
    CASE
        WHEN SUM(fv_at_irr.value) > 0 THEN
            SUM(fv_at_irr.value * COALESCE(liv.irr_value, 0)) / SUM(fv_at_irr.value)
        ELSE NULL
    END AS irr_weighted
FROM
    client_products cp
    -- Link to all funds in the product's portfolio
    LEFT JOIN portfolio_funds pf ON pf.portfolio_id = cp.portfolio_id
    -- Get the latest valuation for each fund
    LEFT JOIN latest_fund_valuations lfv ON lfv.portfolio_fund_id = pf.id
    -- Get the latest IRR for each fund
    LEFT JOIN latest_irr_values liv ON liv.fund_id = pf.id
    -- Get the fund_valuation record associated with the IRR (value at the IRR date)
    LEFT JOIN fund_valuations fv_at_irr ON fv_at_irr.id = liv.fund_valuation_id
GROUP BY
    cp.id;

-- Updated view to use client_groups instead of clients
CREATE OR REPLACE VIEW public.client_group_fum_summary AS
SELECT
    cg.id AS client_group_id,
    COALESCE(SUM(pvis.total_value), 0) AS fum
FROM
    client_groups cg
    LEFT JOIN client_products cp ON cp.client_id = cg.id
    LEFT JOIN product_value_irr_summary pvis ON cp.id = pvis.client_product_id
GROUP BY
    cg.id;

-- View to get product owners with their products
CREATE OR REPLACE VIEW public.product_owner_details AS
SELECT
    po.id AS product_owner_id,
    po.name AS product_owner_name,
    po.status AS product_owner_status,
    cp.id AS product_id,
    cp.product_name,
    cp.product_type,
    cp.start_date,
    cp.end_date,
    cp.status AS product_status,
    pvis.total_value,
    pvis.irr_weighted
FROM
    product_owners po
    LEFT JOIN product_owner_products pop ON pop.product_owner_id = po.id
    LEFT JOIN client_products cp ON cp.id = pop.product_id
    LEFT JOIN product_value_irr_summary pvis ON cp.id = pvis.client_product_id;

-- =========================================================
-- OPTIMIZED BULK DATA VIEWS FOR PERFORMANCE
-- =========================================================

-- View for fund activity summaries (aggregated by portfolio_fund_id)
CREATE OR REPLACE VIEW public.fund_activity_summary AS
SELECT 
    portfolio_fund_id,
    SUM(CASE WHEN activity_type IN ('Investment', 'RegularInvestment', 'GovernmentUplift') THEN amount ELSE 0 END) as total_investments,
    SUM(CASE WHEN activity_type IN ('Withdrawal', 'RegularWithdrawal') THEN amount ELSE 0 END) as total_withdrawals,
    SUM(CASE WHEN activity_type = 'SwitchIn' THEN amount ELSE 0 END) as total_switch_in,
    SUM(CASE WHEN activity_type = 'SwitchOut' THEN amount ELSE 0 END) as total_switch_out
FROM holding_activity_log
GROUP BY portfolio_fund_id;

-- View for complete fund data with all related information
CREATE OR REPLACE VIEW public.complete_fund_data AS
SELECT 
    pf.id as portfolio_fund_id,
    pf.portfolio_id,
    pf.available_funds_id,
    pf.status,
    pf.weighting,
    pf.start_date,
    pf.end_date,
    pf.amount_invested,
    af.fund_name,
    af.isin_number,
    af.risk_factor,
    af.fund_cost,
    lfv.value as market_value,
    lfv.valuation_date,
    liv.irr_value as irr,
    liv.irr_date,
    fas.total_investments,
    fas.total_withdrawals,
    fas.total_switch_in,
    fas.total_switch_out
FROM portfolio_funds pf
LEFT JOIN available_funds af ON af.id = pf.available_funds_id
LEFT JOIN latest_fund_valuations lfv ON lfv.portfolio_fund_id = pf.id
LEFT JOIN latest_irr_values liv ON liv.fund_id = pf.id
LEFT JOIN fund_activity_summary fas ON fas.portfolio_fund_id = pf.id;

-- View for complete client group data with all products and funds
CREATE OR REPLACE VIEW public.client_group_complete_data AS
SELECT 
    cg.id as client_group_id,
    cg.name as client_group_name,
    cg.advisor,
    cg.status as client_group_status,
    cp.id as product_id,
    cp.product_name,
    cp.product_type,
    cp.start_date as product_start_date,
    cp.end_date as product_end_date,
    cp.status as product_status,
    cp.portfolio_id,
    cp.provider_id,
    ap.name as provider_name,
    ap.theme_color as provider_theme_color,
    pvis.total_value as product_total_value,
    pvis.irr_weighted as product_irr,
    -- Portfolio info
    p.portfolio_name,
    p.status as portfolio_status,
    p.template_generation_id,
    -- Fund count for each product
    (SELECT COUNT(*) FROM portfolio_funds pf2 WHERE pf2.portfolio_id = cp.portfolio_id AND pf2.status = 'active') as active_fund_count,
    (SELECT COUNT(*) FROM portfolio_funds pf2 WHERE pf2.portfolio_id = cp.portfolio_id AND pf2.status != 'active') as inactive_fund_count
FROM 
    client_groups cg
    LEFT JOIN client_products cp ON cp.client_id = cg.id
    LEFT JOIN portfolios p ON p.id = cp.portfolio_id
    LEFT JOIN available_providers ap ON ap.id = cp.provider_id
    LEFT JOIN product_value_irr_summary pvis ON cp.id = pvis.client_product_id;

-- =========================================================
-- End of Script
-- =========================================================